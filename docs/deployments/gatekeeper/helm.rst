.. _gatekeeper-helm: 

GateKeeper Service with Helm
============================

.. tip::
    
    espSRC JupyteHub service endpoint: https://gatekeeper.espsrc.iaa.csic.es 


.. note ::
    Kubernetes Server Version: v1.30.6+k3s1


Prerequisites
-------------

Kubernetes Cluster
^^^^^^^^^^^^^^^^^^

Ensure you have a running Kubernetes cluster with at least the next versions:

.. note ::

    Client Version: v1.30.6+k3s1
    Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3
    Server Version: v1.30.6+k3s1


Helm
^^^^ 

Install Helm for deploying this JupyterHub Chart

.. code-block:: bash

   curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
   chmod 700 get_helm.sh
   ./get_helm.sh

GateKeeper repos
^^^^^^^^^^^^^^^^

.. code-block:: bash
    
    helm repo add ska-src-gatekeeper-repo https://gitlab.com/api/v4/projects/60950975/packages/helm/stable
    helm repo update
    
    
Service Configuration
---------------------

To configure the service we need a ``values.yaml`` file to set the variables and directives that GateKeeper needs:

.. code-block:: yaml

    deployment_echo:
        namespace: ska-src-gatekeeper-echo
        image: harbor.srcdev.skao.int/ska-src-dm-da-service-gatekeeper/service-gatekeeper-echo:1.0.1

    gatekeeper:
        namespace: ska-src-gatekeeper
        ingress_proxyBodySize: 5000m
        ingress_proxyBuffering: "off"
        ingress_proxyRequestBuffering: "off"
        iam_token_endpoint: https://ska-iam.stfc.ac.uk/token
        permissions_api_plugin_authz_endpoint: https://permissions.srcdev.skao.int/api/v1/authorise/plugin/
        site_capabilities_api_get_service_by_id_endpoint: https://site-capabilities.srcdev.skao.int/api/v1/services/
        site_capabilities_gatekeeper_client_id:  "<CLIENT-ID>"         # the client id for site-capabilities gatekeeper service client for this node
        site_capabilities_gatekeeper_client_secret: "<SECRET-ID>"    # the client secret for site-capabilities gatekeeper service client for this node
        site_capabilities_gatekeeper_client_scopes: site-capabilities-api-service
        site_capabilities_gatekeeper_client_audience: site-capabilities-api
        services_cache_ttl: 3600
        services:
            - route: "/echo"                          # request route
              namespace: ska-src-gatekeeper-echo      # namespace the service will run in, can be different to gatekeeper ns
              prefix: "http://"                       # usually http:// assuming SSL termination occurs upstream
              service_name: "ska-src-gatekeeper-echo" # to proxied address
              ingress_host: ""                        # Host domain the Ingress rules will apply to
              port: 8080
              uuid: "<UUID-Service>"                  # generated by the site capabilities catalogue, corresponding entry must exist in iam

    ingress-nginx:
      controller:
        replicaCount: 1
        service:
        type: LoadBalancer
        metrics:
        enabled: true
        ingressClassResource:
        name: gatekeeper-nginx
        allowSnippetAnnotations: true
        extraArgs:
        enable-ssl-passthrough: ""
        extraVolumeMounts:
        - name: response-lua
            mountPath: /etc/nginx/lua/conf/response.lua
            subPath: response.lua
            readOnly: true
        - name: backend-lua
            mountPath: /etc/nginx/lua/conf/backend.lua
            subPath: backend.lua
            readOnly: true
        - name: mappings-lua
            mountPath: /etc/nginx/lua/conf/mappings.lua
            subPath: mappings.lua
            readOnly: true
        - name: permissions-lua
            mountPath: /etc/nginx/lua/conf/permissions.lua
            subPath: permissions.lua
            readOnly: true
        - name: site-capabilities-lua
            mountPath: /etc/nginx/lua/conf/site_capabilities.lua
            subPath: site-capabilities.lua
            readOnly: true
        extraVolumes:
        - name: response-lua
            configMap:
            name: response-lua-config
        - name: backend-lua
            configMap:
            name: backend-lua-config
        - name: mappings-lua
            configMap:
            name: mappings-lua-config
        - name: permissions-lua
            configMap:
            name: permissions-lua-config
        - name: site-capabilities-lua
            configMap:
            name: site-capabilities-lua-config
    

Change ``<CLIENT-ID>``, ``<SECRET-ID>`` and ``<UUID-Service>`` to the corresponding values.

Then change this part:

.. code-block:: yaml
    
    services:
        - route: "/echo"                          # request route
            namespace: ska-src-gatekeeper-echo      # namespace the service will run in, can be different to gatekeeper ns
            prefix: "http://"                       # usually http:// assuming SSL termination occurs upstream
            service_name: "ska-src-gatekeeper-echo" # to proxied address
            ingress_host: ""                        # Host domain the Ingress rules will apply to
            port: 8080
            uuid: "<UUID-Service>"                  # generated by the site capabilities catalogue, corresponding entry must exist in iam

with the service or services that will be protected, for example a SODA service:

.. code-block:: yaml
    
    services:
        - route: "/ska/surveys"                          # request route
            namespace: soda-service      # namespace the service will run in, can be different to gatekeeper ns
            prefix: "http://"                       # usually http:// assuming SSL termination occurs upstream
            service_name: "soda-service" # to proxied address
            ingress_host: ""                        # Host domain the Ingress rules will apply to
            port: 8080
            uuid: "<UUID-Service>"                  # generated by the site capabilities catalogue, corresponding entry must exist in iam

Change ``<UUID-Service>`` with the ``UUID`` generated within the ``site-capabilities`` API.

Access to external services
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create an Endpoint:

.. code-block:: yaml

    apiVersion: v1
    kind: Endpoints
    metadata:
    name: external-app-endpoint
    namespace: default
    subsets:
    - addresses:
        - ip: <IP-Service>  # Replace with your external application's IP or DNS name
        ports:
        - port: 8080         # Replace with your application's port

Then create a Service:

.. code-block:: yaml

    apiVersion: v1
    kind: Service
    metadata:
    name: external-app-endpoint
    namespace: default
    spec:
    ports:
        - port: 80           # The port exposed within the cluster
        targetPort: 8080   # The port of your external application
        protocol: TCP
    clusterIP: None        # Makes this a headless service

Then configure the ``values.yaml``, with these values:

.. code-block:: yaml
    
    services:
        - route: "/ska/surveys"                          # request route
            namespace: default      # namespace the service will run in, can be different to gatekeeper ns
            prefix: "http://"                       # usually http:// assuming SSL termination occurs upstream
            service_name: "external-app-endpoint" # to proxied address
            ingress_host: ""                        # Host domain the Ingress rules will apply to
            port: 8080
            uuid: "<UUID-Service>"                  # generated by the site capabilities catalogue, corresponding entry must exist in iam


Deployment Steps
----------------

Once the ``values.yaml`` file has been generated, it will be necessary to proceed with the installation 
of the helm:

.. code-block:: bash

    helm upgrade \ 
       --install --create-namespace -n ska-src-gatekeeper \ 
       --values values.yaml \
       ska-src-gatekeeper ska-src-gatekeeper-repo/ska-src-service-gatekeeper

Post-Deployment Verification
----------------------------

To validate the installation, check the next services deployed by gatekeeper:

.. code-block:: bash

    kubectl get svc -n ska-src-gatekeeper
    ska-src-gatekeeper-ingress-nginx-controller             LoadBalancer   10.X.X.227   <pending>     80:32689/TCP,443:31705/TCP

    kubectl get svc -n ska-src-gatekeeper-echo
    NAME                                                    TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)
    ska-src-gatekeeper-echo                                 NodePort       10.X.X.153    <none>        8080:32254/TCP

    kubectl get ing -n ska-src-gatekeeper-echo
    NAME                              CLASS                      HOSTS       ADDRESS   PORTS
    ska-src-gatekeeper-echo-ingress   ska-src-gatekeeper-nginx   localhost             80

Then validate the echo service (the service installed by default), taking the port `32689` to the test the echo service (locally):

.. code-block:: bash
    
    # Using a INVALID TOKEN
    curl -XGET http://localhost:32689/echo?ID=test -H "Authorization: Bearer $INVALID_TOKEN" | jq .
    {
    "status": "error"
    }

    # Using a VALID TOKEN
    $ curl -XGET http://localhost:32689/echo?ID=test -H "Authorization: Bearer $BEARER_TOKEN" | jq .
    {
    "request_uri": "/?ID=test",
    "request_parameters": {
        "ID": "test"
        }
    }

Troubleshooting
---------------

Getting an 400 Error
^^^^^^^^^^^^^^^^^^^^

You receive a 400 Error message:

.. code-block:: bash

    curl -XGET http://localhost:32689/echo?ID=test -H "Authorization: Bearer eyJr...." | jq .
    {
    "message": "Error returned from permissions API, server returned code 400",
    "status": "ERROR"
    }

Check the Grant Types of the SKAO-IAM Client for this service and select ``client_credentials`` and try again.

Getting an 401 Error
^^^^^^^^^^^^^^^^^^^^

You receive a 400 Error message:

.. code-block:: bash

    curl -XGET http://localhost:32689/echo?ID=test -H "Authorization: Bearer eyJr...." | jq .
    {
    "message": "Error returned from permissions API, server returned code 401",
    "status": "ERROR"
    }


Check if exists a Group with the ``name`` (e.g. ``echo``) and ``<UUID-Service>`` of your Gatekeepered service:  ``services/ESPSRC/echo/<UUID-Service>``. 
You will need a new Group per each service managed by Gatekeeper.

