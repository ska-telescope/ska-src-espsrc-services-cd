apiVersion: v1
kind: ConfigMap
metadata:
  name: espsrccanfar-values
  #namespace: espsrccanfar
  namespace: skaha-system
data:
  values.yaml: |
    replicaCount: 1

    # It's best to keep these set as such, unless you're willing to change these in several places.
    skaha:
      namespace: skaha-system

    # POSIX Mapper web service deployment
    deployment:
      hostname: dev.canfar.espsrc.iaa.csic.es    # Change this!
      posixMapper:
        image: images.opencadc.org/platform/posix-mapper:0.2.1
        imagePullPolicy: IfNotPresent
        resourceID: ivo://opencadc.org/posix-mapper

        # Optionally set the DEBUG port.
        # extraEnv:
        # - name: CATALINA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
        # - name: JAVA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"

        # Uncomment to debug.  Requires options above as well as service port exposure below.
        # extraPorts:
        # - containerPort: 5555
        #   protocol: TCP

        # Resources provided to the Skaha service.
        resources:
          requests:
            memory: "500M"
            cpu: "500m"
          limits:
            memory: "500M"
            cpu: "500m"

        minUID: 1000
        minGID: 900000
        registryURL: https://spsrc27.iaa.csic.es/reg

        # Optionally mount a custom CA certificate
        # extraVolumeMounts:
        # - mountPath: "/config/cacerts"
        #   name: cacert-volume

        # Create the CA certificate volume to be mounted in extraVolumeMounts
        # extraVolumes:
        # - name: cacert-volume
        #   secret:
        #     defaultMode: 420
        #     secretName: posix-manager-cacert-secret

    storage:
      service:
        spec:
          persistentVolumeClaim:
            claimName: skaha-pvc # Match this label up with whatever was installed in the base install, or the desired PVC, or create dynamically provisioned storage.

    secrets:
    # These values are preset in the catalina.properties, and this default database only exists beside this service.
    # It's usually safe to leave these as-is, but make sure they match the values in catalina.properties.
    postgresql:
      auth:
        username: posixmapper
        password: posixmapperpwd
        database: mapping
        schema: mapping
      storage:
        spec:
                #  persistentVolumeClaim:
                #claimName: skaha-pvc

          hostPath:
            path: "/posix-mapper/data"

    # An omission equals true, so set this explicitly.
    base:
      install: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: skaha-values
  #namespace: espsrccanfar
  namespace: skaha-system
data:
  values.yaml: |
    skaha:
      namespace: skaha-system
    skahaWorkload:
      namespace: skaha-workload

    # Skaha web service deployment
    deployment:
      hostname: dev.canfar.espsrc.iaa.csic.es # Change this!
      skaha:
        registryHosts: "images.canfar.net"
        image: images.opencadc.org/platform/skaha:0.17.1
        imagePullPolicy: Always
        skahaTld: "/arc"
        maxUserSessions: "3"
        sessionExpiry: "345600"
        defaultQuotaGB: "10"

        # Space delimited list of allowed Image Registry hosts.  These hosts should match the hosts in the User Session images.
        registryHosts: "spsrc26.iaa.csic.es"

        # The group name to verify users against for permission to use the Science Platform.
        usersGroup: "ivo://skao.int/gms?prototyping-groups/mini-src/platform-users"
        # usersGroup: "ivo://cadc.nrc.ca/gms?skaha-users"

        adminsGroup: "ivo://cadc.nrc.ca/gms?skaha-admins"

        # The Resource ID of the Service that contains the Posix Mapping information
        posixMapperResourceID: "ivo://espsrc.iaa.csic.es/posix-mapper"
        registryURL: https://spsrc27.iaa.csic.es/reg
        # posixMapperResourceID: "ivo://cadc.nrc.ca/gms"

        # Optionally set the DEBUG port.
        # extraEnv:
        # - name: CATALINA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
        # - name: JAVA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"

        # Resources provided to the Skaha service.
        resources:
          requests:
            memory: "550M"
            cpu: "500m"
          limits:
            memory: "550M"
            cpu: "500m"

        homeDir: "/arc/home"
        defautlQuotaGB: "10"


        # Uncomment to debug.  Requires options above as well as service port exposure below.
        # extraPorts:
        # - containerPort: 5555
        #   protocol: TCP

        # Optionally mount a custom CA certificate
        #extraVolumeMounts:
        #- mountPath: "/config/cacerts"
        #  name: cacert-volume

        # If the base names have changed, then change them here, otherwise leave them.
        priorityClassName: uber-user-preempt-high
        serviceAccountName: skaha


        # Create the CA certificate volume to be mounted in extraVolumeMounts
        #extraVolumes:
        #- name: cacert-volume
        #  secret:
        #    defaultMode: 420
        #    secretName: skaha-cacert-secret

    secrets:
      # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
      #  skaha-cacert-secret:
      #  ca.crt: <base64 encoded CA crt>

    # Exposed extra ports.  Uncomment the java-debug port to expose and debug issues.
    # service:
    #   extraPorts:
      # - port: 5555
      #   protocol: TCP
      #   name: java-debug

    # Set these labels appropriately to match your Persistent Volume labels.
    # The storage.service.spec can be anything that supports ACLs, such as CephFS or Local.
    # The CephFS Volume can be dynamically allocated here for the storage.service.spec:
    # Example:
    # storage:
    #   service:
    #     spec:
    #       cephfs:
    #         mons:
    #           ...
    # Default is a PersistentVolumeClaim to the Local Storage.

    storage:
      service:
        spec:
          persistentVolumeClaim:
            claimName: skaha-pvc # Match this label up with whatever was installed in the base install, or the desired PVC, or create dynamically provisioned storage.

    # If the base is already installed.  Omission defaults to true, so set this explicitly.
    # See the template values file (https://github.com/opencadc/science-platform/blob/SP-3544/deployment/helm/base/values.yaml)
    # for all options.
    base:
      install: false


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: science-portal-values
  #namespace: espsrccanfar
  namespace: skaha-system
data:
  values.yaml: |
    # Tell Kubernetes to spin up multiple instances.  Defaults to 1.
    replicaCount: 1

    # It's best to keep these set as such, unless you're willing to change these in several places.
    skaha:
      namespace: skaha-system
    deployment:
      hostname: dev.canfar.espsrc.iaa.csic.es # Change this!
      sciencePortal:
        image: images.opencadc.org/platform/science-portal:0.2.8
        imagePullPolicy: Always
        themeName: "src"

        resources:
          requests:
            memory: "500M"
            cpu: "500m"
          limits:
            memory: "500M"
            cpu: "500m"
        # OIDC (IAM) server configuration.  These are required
        oidc:
          # Location of the OpenID Provider (OIdP), and where users will login
          uri: https://ska-iam.stfc.ac.uk/
          #uri: http://spsrc25.iaa.csic.es:18024/

          # The Client ID as listed on the OIdP.  Create one at the uri above.
          clientID:  d8f92ce0-4860-4992-8a08-10619f61fae4
          #clientID: 87f3b754-d751-4f4b-a2ee-4b436757361c
          # The Client Secret, which should be generated by the OIdP.
          clientSecret: c_tak_NudZoyy4mspQ58NdZLTuTJg55u0k3E3n-c4YE1IrSEqDoKZSmGaRD0ngYhcuNAcatZIRwH1lWgdOKZ7A
          #clientSecret: ALN-67opkQNhLUHtlrFfy6PlI6X_5iMivoBU3iFE05I34-VgzQA31veY5u8FREvtVNfOAIuPeAZVasWQDEu4oUA
          # Where the OIdP should send the User after successful authentication.  This is also known as the redirect_uri in OpenID.  This URI NEEDS
          redirectURI: https://dev.canfar.espsrc.iaa.csic.es/science-portal/oidc-callback

          # Where to redirect to after the redirectURI callback has completed.  This will almost always be the URL to the /science-portal main page (https://example.com/science-portal).
          callbackURI: https://dev.canfar.espsrc.iaa.csic.es/science-portal/

          # The standard OpenID scopes for token requests.  This is required, and if using the SKAO IAM, can be left as-is.
          scope: "openid profile offline_access"

        # Optionally mount a custom CA certificate
        # extraVolumeMounts:
        # - mountPath: "/config/cacerts"
        #   name: cacert-volume

        # Create theCA certificate volume to be mounted in extraVolumeMounts
        # extraVolumes:
        # - name: cacert-volume
        #   secret:
        #     defaultMode: 420
        #     secretName: science-portal-cacert-secret

        # The Resource ID of the Service that contains the URL of the Skaha service in the IVOA Registry
        skahaResourceID: ivo://espsrc.iaa.csic.es/skaha
        gmsID: ivo://skao.int/gms
        #gmsID: http://spsrc25.iaa.csic.es:18023
        registryURL: https://spsrc27.iaa.csic.es/reg
        #identityManagerClass: org.opencadc.auth.StandardIdentityManager
        # The logo in the top left.  No link associated, just the image.  This can be relative, or absolute.
        # Default is the SRCNet Logo.
        #logoURL: /science-portal/images/SRCNetLogo.png

    # secrets:
      # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
      # science-portal-cacert-secret:
        # ca.crt: <base64 encoded ca.crt blob>
    # For the token caching
    redis:
      architecture: 'standalone'
      auth:
        enabled: false
      master:
        persistence:
          enabled: false

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cavern-values
  #namespace: espsrccanfar
  namespace: skaha-system
data:
  values.yaml: |
    deployment:
      hostname: dev.canfar.espsrc.iaa.csic.es
      cavern:
        image: images.opencadc.org/platform/cavern:0.7.14
        imagePullPolicy: Always
        # How cavern identifies itself.
        resourceID: "ivo://espsrc.iaa.csic.es/cavern"

        registryURL: https://spsrc27.iaa.csic.es/reg
        # How to find the POSIX Mapper API.  URI (ivo://) or URL (https://).
        posixMapperResourceID: "ivo://espsrc.iaa.csic.es/posix-mapper"

        # The endpoint to serve this from.  Defaults to /cavern.
        # endpoint: "/cavern"

        filesystem:
          # persistent data directory in container
          dataDir: "/data"

          # relative path to the node/file content that could be mounted in other containers, including Skaha.
          subPath: "/cavern"

          # See https://github.com/opencadc/vos/tree/master/cavern for documentation.  For deployments using OpenID Connect,
          # the rootOwner MUST be an object with the following properties set.
          rootOwner:
            # The adminUsername is required to be set whomever has admin access over the filesystem.dataDir above.
            adminUsername: mparra

            # The username of the root owner.
            username: mparra

            # The UID of the root owner.
            uid: 1000

            # The GID of the root owner.
            gid: 1000

          # (optional) keys to generate pre-auth URLs to cavern
          # keys:
            # private: <private key file>
            # public: <public key file>

        # When using a database to connect to UWS.  These can stay as-is, unless you would like to use
        # a different database.
        # uws:
        #   db:
        #     username: uwsuser
        #     password: uwspwd
        #     database: uws
        #     schema: uws
        #     maxActive: 2
        #     storage:
        #       spec:
        #         hostPath:
        #           path: "/cavern-uws/data"

        # Optionally set the DEBUG port.
        # extraEnv:
        # - name: CATALINA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
        # - name: JAVA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"

        # Optionally mount a custom CA certificate
        # extraVolumeMounts:
        # - mountPath: "/config/cacerts"
        #   name: cacert-volume

        # Create the CA certificate volume to be mounted in extraVolumeMounts
        # extraVolumes:
        # - name: cacert-volume
        #   secret:
        #     defaultMode: 420
        #     secretName: skaha-cacert-secret

        # Resources provided to the Skaha service.
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "500m"

    # secrets:
      # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
      # cavern-cacert-secret:
      #   ca.crt: <base64 encoded CA crt>

    # Set these appropriately to match your Persistent Volume Claim labels.
    storage:
      service:
        spec:
          # YAML for service mounted storage.
          # Example is the persistentVolumeClaim below.  This should match whatever Skaha used.
          persistentVolumeClaim:
            claimName: skaha-pvc
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: storageui-values
  #namespace: espsrccanfar
  namespace: skaha-system
data:
  values.yaml: |
    deployment:
      hostname: dev.canfar.espsrc.iaa.csic.es
      storageUI:
        image: images.opencadc.org/client/storage-ui:1.1.8
        imagePullPolicy: Always

        # Optionally set the DEBUG port.
        # extraEnv:
        # - name: CATALINA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
        # - name: JAVA_OPTS
        #   value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"

        # Uncomment to debug.  Requires options above as well as service port exposure below.
        # extraPorts:
        # - containerPort: 5555
        #   protocol: TCP

        # Resources provided to the Skaha service.
        resources:
          requests:
            memory: "500M"
            cpu: "500m"
          limits:
            memory: "500M"
            cpu: "500m"

        # Dictionary of all VOSpace APIs (Services) available that will be visible on the UI.
        # Format is:
        backend:
          defaultService: manucavern
          services:
            manucavern:
              resourceID: "ivo://espsrc.iaa.csic.es/cavern"
              nodeURIPrefix: "vos://espsrc.iaa.csic.es~cavern"
              userHomeDir: "/home"
              features:
                batchDownload: false
                batchUpload: false
                externalLinks: false
                paging: false

        # ID (URI) of the GMS Service.
        gmsID: ivo://skao.int/gms

        oidc:
          # Location of the OpenID Provider (OIdP), and where users will login
          uri: https://ska-iam.stfc.ac.uk/

          # The Client ID as listed on the OIdP.  Create one at the uri above.
          clientID:  d8f92ce0-4860-4992-8a08-10619f61fae4

          # The Client Secret, which should be generated by the OIdP.
          clientSecret: c_tak_NudZoyy4mspQ58NdZLTuTJg55u0k3E3n-c4YE1IrSEqDoKZSmGaRD0ngYhcuNAcatZIRwH1lWgdOKZ7A

          # Where the OIdP should send the User after successful authentication.  This is also known as the redirect_uri in OpenID.  This URI NEEDS
          redirectURI: https://dev.canfar.espsrc.iaa.csic.es/storage/oidc-callback

          # Where to redirect to after the redirectURI callback has completed.  This will almost always be the URL to the /science-portal main page (https://example.com/science-portal).
          callbackURI: https://dev.canfar.espsrc.iaa.csic.es/storage/list

          # The standard OpenID scopes for token requests.  This is required, and if using the SKAO IAM, can be left as-is.
          scope: "openid profile offline_access"
        # OIDC (IAM) server configuration.  These are required
        # oidc:
          # Location of the OpenID Provider (OIdP)
          # uri: https://ska-iam.stfc.ac.uk/
          # The Client ID as listed on the OIdP.
          # clientID:
          # The Client Secret, which should be generated by the OIdP.
          # clientSecret:
          # Where the OIdP should send the User after successful authentication (redirect_uri)
          # redirectURI:
          # Where to redirect to after the redirectURI callback has completed.  This will usually be the URL to the /storage/list main page.
          # callbackURI:
          # The standard OpenID scopes for token requests.  This is required.
          # scope: "openid profile offline_access"

        registryURL: https://spsrc27.iaa.csic.es/reg

        # The IdentityManager class handling authentication.  This should generally be left alone
        identityManagerClass: org.opencadc.auth.StandardIdentityManager

        # Optionally mount a custom CA certificate
        # extraVolumeMounts:
        # - mountPath: "/config/cacerts"
        #   name: cacert-volume

        # Create the CA certificate volume to be mounted in extraVolumeMounts
        # extraVolumes:
        # - name: cacert-volume
        #   secret:
        #     defaultMode: 420
        #     secretName: storage-ui-cacert-secret

        # Default theme is the SRC one.
        themeName: src

    # secrets:
      # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
      # storage-ui-cacert-secret:
      #   ca.crt: <base64 encoded ca crt>

    # For the token caching
    redis:
      architecture: 'standalone'
      auth:
        enabled: false
      master:
        persistence:
          enabled: false
